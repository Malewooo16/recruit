generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  role        String
  ActivityLog ActivityLog[]
  recruit     Recruit?
  recruiter   Recruiter?
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  action      String
  description String
  createdAt   DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Company {
  id              Int         @id @default(autoincrement())
  name            String
  industry        String
  departments     String?
  website         String
  logo            String?
  emailAddress    String
  phoneNumber     String
  physicalAddress String
  jobOffers       JobOffer[]
  recruiters      Recruiter[]
}

model Recruit {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String        @unique
  userId       Int           @unique
  applications Application[]
  interviews   Interview[]
  user         User          @relation(fields: [userId], references: [id])
}

model Recruiter {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  role      String
  userId    Int      @unique
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model JobOffer {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  location     String
  salary       Float
  companyId    Int
  experience   String?
  applications Application[]
  interviews   Interview[]
  company      Company       @relation(fields: [companyId], references: [id])
}

model Application {
  id         Int       @id @default(autoincrement())
  recruitId  Int
  jobOfferId Int?
  status     String
  createdAt  DateTime  @default(now())
  jobOffer   JobOffer? @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  recruit    Recruit   @relation(fields: [recruitId], references: [id])
}

model Interview {
  id              Int       @id @default(autoincrement())
  date            DateTime
  location        String?
  email           String
  phone           String
  online          Boolean
  startTime       DateTime?
  joinMeetingUrl  String?
  startMeetingUrl String?
  recruitId       Int
  jobOfferId      Int?
  jobOffer        JobOffer? @relation(fields: [jobOfferId], references: [id])
  recruit         Recruit   @relation(fields: [recruitId], references: [id])
}
